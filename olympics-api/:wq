#/usr/bin/env python3
'''
    flask_sample.py
    Jeff Ondich, 22 April 2016
    Updated 7 October 2020

    A slightly more complicated Flask sample app than the
    "hello world" app found at http://flask.pocoo.org/.
'''
import sys
import argparse
import flask
import json
import psycopg2
from quoc_config import user
from quoc_config import password
from quoc_config import database

app = flask.Flask(__name__)

@app.route('/')
def hello():
    return 'Hello, Citizen of CS257.'

def get_game_from_database():
  try:
      connection = psycopg2.connect(database=database, user=user, password=password)
  except Exception as e:
      print(e)
      exit()
  cursor = connection.cursor()
  query = "SELECT * FROM games ORDER BY year"
  cursor.execute(query)
  games_list = []
  for row in cursor:
      one_game = {}
      game_id = int(row[0] 
      year = int(row[1])
      season = row[2]
      city = row[3]
      one_game['id'] = game_id
      one_game['year'] = year
      one_game['season'] = season
      one_game['city'] = city
      games_list.append(one_game)
  return games_list

@app.route('/games')
def get_games():
    ''' Returns list of games with their id, year, season, and city. '''
    games_list = get_game_from_database()
    return json.dumps(games_list)


def get_noc_from_database():
  try:
      connection = psycopg2.connect(database=database, user=user, password=password)
  except Exception as e:
      print(e)
      exit()
  cursor = connection.cursor()
  query = "SELECT * FROM games ORDER BY year"
  cursor.execute(query)
  games_list = []
  for row in cursor:
      one_game = {}
      game_id = int(row[0] 
      year = int(row[1])
      season = row[2]
      city = row[3]
      one_game['id'] = game_id
      one_game['year'] = year
      one_game['season'] = season
      one_game['city'] = city
      games_list.append(one_game)
  return games_list


@app.route('/nocs')
def get_nocs():
     Returns the list of movies that match GET parameters:
          start_year, int: reject any movie released earlier than this year
          end_year, int: reject any movie released later than this year
          genre: reject any movie whose genre does not match this genre exactly
        If a GET parameter is absent, then any movie is treated as though
        it meets the corresponding constraint. (That is, accept a movie unless
        it is explicitly rejected by a GET parameter.)

    nocs_dictionary = {}
    id = flask.request.args.get('id')
    year = flask.request.args.get('year', default=0, type=int)
    season = flask.request.args.get('season')
    city = flask.request.args.get('city')
    for movie in movies:
        if genre is not None and genre != movie['genre']:
            continue
        if movie['year'] < start_year:
            continue
        if movie['year'] > end_year:
            continue
        movie_list.append(movie)

    return json.dumps(movie_list)

@app.route('/medalists/games/<games_id>?[noc=noc_abbreviation]')
def get_movies():
    Returns the list of movies that match GET parameters:
          start_year, int: reject any movie released earlier than this year
          end_year, int: reject any movie released later than this year
          genre: reject any movie whose genre does not match this genre exactly
        If a GET parameter is absent, then any movie is treated as though
        it meets the corresponding constraint. (That is, accept a movie unless
        it is explicitly rejected by a GET parameter.)

    movie_list = []
    genre = flask.request.args.get('genre')
    start_year = flask.request.args.get('start_year', default=0, type=int)
    end_year = flask.request.args.get('end_year', default=10000, type=int)
    for movie in movies:
        if genre is not None and genre != movie['genre']:
            continue
        if movie['year'] < start_year:
            continue
        if movie['year'] > end_year:
            continue
        movie_list.append(movie)

    return json.dumps(movie_list)
'''

@app.route('/help')
def get_help():
    return flask.render_template('help.html')

if __name__ == '__main__':
    parser = argparse.ArgumentParser('A sample Flask application/API')
    parser.add_argument('host', help='the host on which this application is running')
    parser.add_argument('port', type=int, help='the port on which this application is listening')
    arguments = parser.parse_args()
    app.run(host=arguments.host, port=arguments.port, debug=True)
